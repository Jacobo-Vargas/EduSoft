name: Deploy Backend to AWS ECR

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'  # Solo se ejecuta si hay cambios en backend
      - '.github/workflows/deploy-backend.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Login a ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Build & Push Docker image
      - name: Build, tag, and push image to ECR
        run: |
          IMAGE_REPO_NAME=edusoft-back
          IMAGE_TAG=latest
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REGISTRY=$ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com

          echo "Building Docker image..."
          docker build -t $IMAGE_REPO_NAME ./backend

          echo "Tagging image..."
          docker tag $IMAGE_REPO_NAME:latest $ECR_REGISTRY/$IMAGE_REPO_NAME:$IMAGE_TAG

          echo "Pushing image..."
          docker push $ECR_REGISTRY/$IMAGE_REPO_NAME:$IMAGE_TAG

      # 5. Deploy en EC2 v√≠a SSH
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            set -e
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com"
            IMAGE_NAME="edusoft-back:latest"

            # Limpiar posibles caracteres invisibles
            IMAGE_NAME=$(echo $IMAGE_NAME | tr -d '\r\n')
            ECR_REGISTRY=$(echo $ECR_REGISTRY | tr -d '\r\n')

            echo "Using image: $ECR_REGISTRY/$IMAGE_NAME"

            # Exportar secrets como variables de entorno para docker
            export DB_HOST="${{ secrets.DB_HOST }}"
            export DB_PORT="${{ secrets.DB_PORT }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export BD_PASSWORD="${{ secrets.BD_PASSWORD }}"
            export REDIS_HOST="${{ secrets.REDIS_HOST }}"
            export REDIS_PORT="${{ secrets.REDIS_PORT }}"
            export MAIL_USER="${{ secrets.MAIL_USER }}"
            export MAIL_PASSWORD="${{ secrets.MAIL_PASSWORD }}"
            export SSL_PASS="${{ secrets.SSL_PASS }}"
            export SSL_ALIAS="${{ secrets.SSL_ALIAS }}"

            echo "Login to ECR on EC2..."
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY

            echo "Pulling latest image..."
            docker pull "$ECR_REGISTRY/$IMAGE_NAME"

            echo "Stopping old container..."
            docker stop edusoft-back || true
            docker rm edusoft-back || true

            echo "Running new container..."
            docker run -d \
              --name edusoft-back \
              -p 8443:8443 \
              -e DB_HOST \
              -e DB_PORT \
              -e DB_USER \
              -e BD_PASSWORD \
              -e REDIS_HOST \
              -e REDIS_PORT \
              -e MAIL_USER \
              -e MAIL_PASSWORD \
              -e SSL_PASS \
              -e SSL_ALIAS \
              "$ECR_REGISTRY/$IMAGE_NAME"
